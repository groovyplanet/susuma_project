<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.susuma.member.model.MemberMapper">

	<!-- [1] 회원 목록 -->
	<select id="selectMembers" parameterType="map" resultType="com.susuma.member.model.MemberDTO">
		SELECT *
   		FROM (
        SELECT A.*, ROWNUM AS RN
        FROM (
            SELECT ME_NO, TYPE, EMAIL, PW, NAME, ADDRESS, ADDRESS_DETAIL, LATITUDE, LONGITUDE, PHONE_NUM,
                   EMAIL_NOTIFICATION, PROFILE_PHOTO, JOIN_APPROVAL, JOIN_APPROVAL_TIME,
                   BUSINESS_NUMBER, SHORT_DESCRIPTION, MAX_DISTANCE, DESCRIPTION,
                   WORK_HOURS, POINT, STATUS, M.INSERT_TIME, M.UPDATE_TIME,
                   C.CA_NO, C.CA_NAME, CR.CA_NO AS CA_ROOT_NO, CR.CA_NAME AS CA_ROOT_NAME,
                   RESULT.AVERAGE_SCORE, RESULT.REVIEW_COUNT,
                   (6371 * acos(cos(RADIANS(#{latitude})) * cos(RADIANS(M.LATITUDE)) * cos(RADIANS(M.LONGITUDE) - RADIANS(#{longitude})) + sin(RADIANS(#{latitude})) * sin(RADIANS(M.LATITUDE)))) AS DISTANCE
            FROM MEMBER M
            LEFT JOIN CATEGORY C ON C.CA_NO = M.CA_NO
            LEFT JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
            LEFT JOIN (
                SELECT MASTER_NO, ROUND(AVG(STAR_SCORE), 2) AS AVERAGE_SCORE, COUNT(STAR_SCORE) AS REVIEW_COUNT
                FROM (
                    SELECT *
                    FROM REVIEW R
                    INNER JOIN REQUEST R2 ON R.REQ_NO = R2.REQ_NO
                )
                GROUP BY MASTER_NO
            ) RESULT ON M.ME_NO = RESULT.MASTER_NO
            WHERE M.TYPE = #{type}
            <if test="joinApproval != 'all'">
                AND M.JOIN_APPROVAL = #{joinApproval}
            </if>
            <if test="rootNo != 'all'">
                AND CR.CA_NO = #{rootNo}
            </if>
            <if test="rootNo != 'all' and caNo != 'all'">
                AND C.CA_NO = #{caNo}
            </if>
            <if test="maxDistance != null and maxDistance != ''">
                AND (6371 * acos(cos(RADIANS(#{latitude})) * cos(RADIANS(M.LATITUDE)) * cos(RADIANS(M.LONGITUDE) - RADIANS(#{longitude})) + sin(RADIANS(#{latitude})) * sin(RADIANS(M.LATITUDE)))) &lt;= #{maxDistance}
            </if>
            <if test='sortField != "AVERAGE_SCORE"'>
            	ORDER BY M.${sortField} ${sortOrder} NULLS LAST
            </if>
            <if test='sortField == "AVERAGE_SCORE"'>
            	ORDER BY RESULT.AVERAGE_SCORE ${sortOrder} NULLS LAST
            </if>
        ) A
    )
    WHERE RN BETWEEN #{startRow} and #{endRow}
	</select>

	<!-- [1-2] 회원 목록 수(페이징 처리) -->
	<select id="countMembers" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER M
		LEFT JOIN CATEGORY C
		ON C.CA_NO = M.CA_NO
		LEFT JOIN CATEGORY CR
		ON CR.CA_NO = C.ROOT_NO
		WHERE M.TYPE = #{type}
		<if test="joinApproval != 'all'">
			AND M.JOIN_APPROVAL = #{joinApproval}
		</if>
		<if test="rootNo != 'all'">
			AND CR.CA_NO = #{rootNo}
		</if>
		<if test="rootNo != 'all' and caNo != 'all'">
			AND C.CA_NO = #{caNo}
		</if>
         <if test="maxDistance != null and maxDistance != ''">
             AND (6371 * acos(cos(RADIANS(#{latitude})) * cos(RADIANS(M.LATITUDE)) * cos(RADIANS(M.LONGITUDE) - RADIANS(#{longitude})) + sin(RADIANS(#{latitude})) * sin(RADIANS(M.LATITUDE)))) &lt;= #{maxDistance}
         </if>
	</select>

	<!-- [2] 회원 -->
	<select id="selectMember" parameterType="map" resultType="com.susuma.member.model.MemberDTO">
		SELECT ME_NO, TYPE, EMAIL, PW, NAME, ADDRESS, ADDRESS_DETAIL,
		LATITUDE, LONGITUDE, PHONE_NUM, EMAIL_NOTIFICATION, PROFILE_PHOTO,
		JOIN_APPROVAL, JOIN_APPROVAL_TIME, BUSINESS_NUMBER, SHORT_DESCRIPTION,
		MAX_DISTANCE, DESCRIPTION, WORK_HOURS, POINT, STATUS, M.INSERT_TIME,
		M.UPDATE_TIME
		, C.CA_NO
		, C.CA_NAME
		, CR.CA_NO AS CA_ROOT_NO
		, CR.CA_NAME
		AS CA_ROOT_NAME
		,RESULT.AVERAGE_SCORE
		,RESULT.REVIEW_COUNT
		,(SELECT LISTAGG(REQUEST_DATE || ' ' || REQUEST_TIME, ',') WITHIN GROUP (ORDER BY REQUEST_DATE, REQUEST_TIME)
		FROM REQUEST
		WHERE MASTER_NO = ME_NO AND STATUS != 'cancel'
		) AS REQUEST_DATETIME
		FROM
		MEMBER M
		LEFT JOIN CATEGORY C ON C.CA_NO = M.CA_NO
		LEFT JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
		LEFT JOIN (
		SELECT
		MASTER_NO,
		ROUND(AVG(STAR_SCORE), 2) AS AVERAGE_SCORE,
		COUNT(STAR_SCORE) AS REVIEW_COUNT
		FROM (
		SELECT *
		FROM REVIEW R
		INNER JOIN REQUEST R2 ON R.REQ_NO = R2.REQ_NO
		)
		GROUP BY MASTER_NO
		) RESULT ON M.ME_NO = RESULT.MASTER_NO
		WHERE 1 = 1
		<if test="meNo != null">
			AND M.ME_NO = #{meNo}
		</if>
		<if test="email != null and pw != null">
			AND M.EMAIL = #{email} AND M.PW = #{pw}
		</if>
		<if test="email != null and pw == null">
			AND M.EMAIL = #{email}
		</if>
	</select>

	<!-- [3] 회원 등록 -->
	<insert id="insertMember" parameterType="com.susuma.member.model.MemberDTO">
		INSERT INTO MEMBER (ME_NO, TYPE, EMAIL, PW, NAME,
		PHONE_NUM, ADDRESS, ADDRESS_DETAIL, LATITUDE, LONGITUDE,
		EMAIL_NOTIFICATION, PROFILE_PHOTO, BUSINESS_NUMBER, SHORT_DESCRIPTION, MAX_DISTANCE,
		DESCRIPTION, WORK_HOURS, CA_NO, JOIN_APPROVAL, POINT, STATUS)
		VALUES
		(MEMBER_SEQ.NEXTVAL, #{type}, #{email}, #{pw}, #{name}, #{phoneNum},
		#{address}, #{addressDetail}, #{latitude}, #{longitude},
		#{emailNotification}, #{profilePhoto, jdbcType=BLOB}, #{businessNumber}, #{shortDescription},
		#{maxDistance}, #{description}, #{workHours}, #{caNo},
		#{joinApproval}, #{point}, #{status}
		)
	</insert>

	<!-- [4] 회원 수정 -->
	<update id="updateMember" parameterType="com.susuma.member.model.MemberDTO">
		UPDATE MEMBER
		SET
		<if test="email != null">
			EMAIL = #{email},
		</if>
		<if test="pw != null">
			PW = #{pw},
		</if>
		<if test="name != null">
			NAME = #{name},
		</if>
		<if test="phoneNum != null">
			PHONE_NUM = #{phoneNum},
		</if>
		<if test="address != null">
			ADDRESS = #{address},
		</if>
		<if test="addressDetail != null">
			ADDRESS_DETAIL = #{addressDetail},
		</if>
		<if test="latitude != null">
			LATITUDE = #{latitude},
		</if>
		<if test="longitude != null">
			LONGITUDE = #{longitude},
		</if>
		<if test="emailNotification != null">
			EMAIL_NOTIFICATION = #{emailNotification},
		</if>
		<if test="profilePhoto != null">
			PROFILE_PHOTO = #{profilePhoto, jdbcType=BLOB},
		</if>
		<if test="businessNumber != null">
			BUSINESS_NUMBER = #{businessNumber},
		</if>
		<if test="shortDescription != null">
			SHORT_DESCRIPTION = #{shortDescription},
		</if>
		<if test="maxDistance != null">
			MAX_DISTANCE = #{maxDistance},
		</if>
		<if test="description != null">
			DESCRIPTION = #{description},
		</if>
		<if test="workHours != null">
			WORK_HOURS = #{workHours},
		</if>
		<if test="caNo != null">
			CA_NO = #{caNo},
		</if>
		<if test="joinApproval != null">
			JOIN_APPROVAL = #{joinApproval},
		</if>
		<if test="point != null">
			POINT = #{point},
		</if>
		<if test="status != null">
			STATUS = #{status},
		</if>
		UPDATE_TIME = SYSDATE
		WHERE
		ME_NO = #{meNo}
	</update>

	<!-- [4-2] 회원 수정(수리기사 승인) -->
	<update id="updateMemberApprove" parameterType="string">
		UPDATE MEMBER
		SET
		JOIN_APPROVAL = 'Y',
		JOIN_APPROVAL_TIME = SYSDATE
		WHERE
		ME_NO = #{meNo}
	</update>

	<!-- [5] 회원 삭제 -->
	<delete id="deleteMember" parameterType="string">
		DELETE FROM MEMBER
		WHERE
		ME_NO = #{meNo}
	</delete>

	<select id="getPassword" parameterType="string" resultType="string">
		SELECT pw
		FROM MEMBER
		WHERE ME_NO = #{meNo}
	</select>

	<select id="selectMain" resultType="com.susuma.member.model.MemberDTO">
		SELECT *
		FROM (
		SELECT M.ME_NO,
		M.NAME,
		M.ADDRESS,
		M.PROFILE_PHOTO,
		M.SHORT_DESCRIPTION,
		M.MAX_DISTANCE,
		RESULT.AVERAGE_SCORE,
		RESULT.REVIEW_COUNT,
		CR.CA_NAME AS CA_ROOT_NAME,
		C.CA_NAME
		FROM MEMBER M
		JOIN (
		SELECT MASTER_NO, ROUND( AVG(STAR_SCORE), 2) AS AVERAGE_SCORE, COUNT(STAR_SCORE) AS REVIEW_COUNT
		FROM (
		SELECT *
		FROM REVIEW R
		INNER JOIN REQUEST R2
		ON R.REQ_NO = R2.REQ_NO
		)
		GROUP BY MASTER_NO
		) RESULT
		ON M.ME_NO = RESULT.MASTER_NO
		JOIN CATEGORY C
		ON C.CA_NO = M.CA_NO
		JOIN CATEGORY CR
		ON CR.CA_NO = C.ROOT_NO

		) WHERE ROWNUM &lt;= 3
	</select>

	<select id="selectMainRe" resultType="com.susuma.member.model.MemberDTO">
		SELECT RE.REQ_NO, MASTER_NO, MM.NAME AS MASTER_NAME, MM.PROFILE_PHOTO, MC.NAME AS CLIENT_NAME, RE.CONTENT, RE.STAR_SCORE ,RE.INSERT_TIME
		FROM REVIEW RE
		JOIN REQUEST REQ ON RE.REQ_NO = REQ.REQ_NO
		JOIN MEMBER MM ON MM.ME_NO = REQ.MASTER_NO
		JOIN MEMBER MC ON MC.ME_NO = REQ.CLIENT_NO
		WHERE ROWNUM &lt;=3
		ORDER BY RE.RE_NO DESC
	</select>
	<select id="selectMasterre" resultType="com.susuma.member.model.MemberDTO">
		SELECT RE.REQ_NO, MASTER_NO, MM.NAME AS MASTER_NAME, MC.PROFILE_PHOTO, MC.NAME AS CLIENT_NAME, RE.CONTENT, RE.STAR_SCORE ,RE.INSERT_TIME
		FROM REVIEW RE
		JOIN REQUEST REQ ON RE.REQ_NO = REQ.REQ_NO
		JOIN MEMBER MM ON MM.ME_NO = REQ.MASTER_NO
		JOIN MEMBER MC ON MC.ME_NO = REQ.CLIENT_NO
		WHERE MM.ME_NO = #{meNo}
		ORDER BY RE.RE_NO DESC
	</select>

	

	<!-- 회원의 포인트 잔액을 조회 -->
	<select id="MemberPoints" parameterType="String" resultType="Integer">
		SELECT point FROM MEMBER WHERE ME_NO = #{meNo}
	</select>

	<!-- 포인트 사용 내역 조회 -->
	<select id="getPointSpendings" resultType="com.susuma.member.model.MemberDTO">
		SELECT req_no AS meNo, pay_amount AS point, paid_time AS insertTime
		FROM REQUEST
		WHERE client_no = #{meNo} AND pay_status = 'Y'
		ORDER BY paid_time DESC
	</select>

	<!-- 마이페이지 포인트 적립 내역(의뢰인은 point_history, 수리기사는 request까지) ★ -->
	<select id="getPointEarnings" resultType="com.susuma.member.model.MemberDTO">
		SELECT point, pc_time as insert_time
		FROM POINT_HISTORY
		WHERE me_no = #{meNo} AND point > 0
        
        UNION ALL
        
        SELECT -pay_amount as point, paid_time as insert_time
        FROM REQUEST
        WHERE master_no = #{meNo} AND pay_status = 'Y'
		
		ORDER BY insert_time DESC
	</select>
	
	<!-- 마이페이지 포인트 사용 내역(수리기사는 point_history, 의뢰인은 request까지) ★ -->
	<select id="getMinus" resultType="com.susuma.member.model.MemberDTO">
		SELECT point, pc_time as insert_time
        FROM POINT_HISTORY
        WHERE me_no = #{meNo} AND point &lt; 0
        
        UNION ALL
        
        SELECT pay_amount as point, paid_time as insert_time
        FROM REQUEST
        WHERE client_no = #{meNo} AND pay_status = 'Y'
        
        ORDER BY insert_time DESC
	</select>

	<update id="updateMemberPoints">
		UPDATE MEMBER SET point = #{point} WHERE me_no = #{meNo}
	</update>

	<insert id="addSpendingHistory">
		INSERT INTO POINT_HISTORY (pc_no, me_no, point, pc_time)
		VALUES (point_history_seq.NEXTVAL, #{meNo}, #{point}, SYSDATE)
	</insert>



	<insert id="addEarningHistory">
		INSERT INTO POINT_HISTORY (me_no, point, pc_time) VALUES (#{meNo}, #{point}, SYSDATE)
	</insert>
	
	<update id="updatePw" parameterType="com.susuma.member.model.MemberDTO">
		UPDATE MEMBER SET PW = #{pw} WHERE EMAIL=#{email}
	</update>

	<!-- 경도위도 -->
	<select id="selectLaLo" resultType="com.susuma.member.model.MemberDTO">
		SELECT LATITUDE,LONGITUDE
		FROM MEMBER
		WHERE ME_NO = #{meNo}
	</select>

</mapper>